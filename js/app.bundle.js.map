{"version":3,"file":"js/app.bundle.js","mappings":"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","sources":["webpack://skyve-app/./src/assets/images/ sync \\.(png%7Cjpe","webpack://skyve-app/webpack/bootstrap","webpack://skyve-app/webpack/runtime/global","webpack://skyve-app/webpack/runtime/hasOwnProperty shorthand","webpack://skyve-app/webpack/runtime/publicPath","webpack://skyve-app/./src/js/app.js"],"sourcesContent":["var map = {\n\t\"./background/morn.webp\": 30,\n\t\"./background/night.webp\": 648,\n\t\"./background/noon.webp\": 296,\n\t\"./background/starry-mountain.webp\": 497,\n\t\"./house.webp\": 755,\n\t\"./weather/clear/morn-clear.webp\": 562,\n\t\"./weather/clear/night-clear.webp\": 804,\n\t\"./weather/cloudly/evening-cloudly.webp\": 282,\n\t\"./weather/cloudly/morn-cloudly.webp\": 696,\n\t\"./weather/cloudly/night-cloudly.webp\": 384,\n\t\"./weather/drizzle/evening-drizzle.webp\": 210,\n\t\"./weather/drizzle/morn-drizzle.webp\": 423,\n\t\"./weather/drizzle/night-drizzle.webp\": 932,\n\t\"./weather/icon/cloud.webp\": 891,\n\t\"./weather/icon/lighting.webp\": 218,\n\t\"./weather/icon/rain.webp\": 788,\n\t\"./weather/icon/snow.webp\": 125,\n\t\"./weather/icon/star1.webp\": 153,\n\t\"./weather/icon/star2.webp\": 764,\n\t\"./weather/icon/sun.webp\": 616,\n\t\"./weather/rain/evening-rain.webp\": 810,\n\t\"./weather/rain/morn-rain.webp\": 44,\n\t\"./weather/rain/night-rain.webp\": 356,\n\t\"./weather/snow/evening-snow.webp\": 496,\n\t\"./weather/snow/morn-snow.webp\": 852,\n\t\"./weather/snow/night-snow.webp\": 658,\n\t\"./weather/thunderstorm/evening-storm.webp\": 868,\n\t\"./weather/thunderstorm/morn-storm.webp\": 568,\n\t\"./weather/thunderstorm/night-storm.webp\": 974\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 295;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl + \"../\";","// import CSS\r\nimport \"../../src/css/main.css\";\r\n// import CSS\r\nimport \"../../src/css/styles.css\";\r\n\r\n// import all images from assets/images folder\r\nconst images = require.context('../assets/images', true, /\\.(png|jpe?g|gif|svg|webp)$/);\r\n\r\n// create an array to store all imported images\r\nimages.keys().map((key) => images(key));\r\n\r\n// show-hide drawer\r\n$('#drawer-toggle').on('click', function () {\r\n  const drawer = $('#drawer-swipe');\r\n  const expandedContent = $('#drawer-expanded-content');\r\n\r\n  if (drawer.hasClass('drawer-collapsed')) {\r\n    drawer.removeClass('drawer-collapsed').addClass('drawer-expanded');\r\n    expandedContent.removeClass('hidden');\r\n  } else {\r\n    drawer.removeClass('drawer-expanded').addClass('drawer-collapsed');\r\n    expandedContent.addClass('hidden');\r\n  }\r\n});\r\n\r\n\r\nconst daysOfWeek = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\"]; // Array list of day\r\nconst cityName = $(\"#city-name\");\r\nconst countryCode = $(\"#country-code\");\r\n\r\nconst currentTemp = $(\"#current-temp\");\r\nconst currentHumi = $(\"#current-humi\");\r\nconst currentWeather = $(\"#current-weather\");\r\nconst currentWindSpeed = $(\"#current-windspeed\");\r\nconst iconCurrentWeather = $(\"#icon-current-weather\");\r\n\r\n// const day1 = $(\"#day1\");\r\n// const day2 = $(\"#day2\");\r\n// const day3 = $(\"#day3\");\r\n// const day4 = $(\"#day4\");\r\n// const day5 = $(\"#day5\");\r\n// const day6 = $(\"#day6\");\r\n// const day7 = $(\"#day7\");\r\n\r\n// const selectorHours = [\r\n//   $(\"#hour1\"), $(\"#hour2\"), $(\"#hour3\"), $(\"#hour4\"), $(\"#hour5\"),\r\n//   $(\"#hour6\"), $(\"#hour7\"), $(\"#hour8\"), $(\"#hour9\"), $(\"#hour10\"),\r\n//   $(\"#hour11\"), $(\"#hour12\")\r\n// ];\r\n\r\n\r\nconst localTime = $(\"#local-time\");\r\n\r\n\r\nconst showTime = () => {\r\n  let d = new Date(); // (f) date\r\n  let date = d.getDate()  // get date\r\n  let day = d.getDay(); // get array day [0-6]\r\n\r\n  let hours = d.getHours(); // get hours\r\n  let minutes = d.getMinutes(); // get minute\r\n  \r\n  hours = (hours < 10) ? \"0\" + hours : hours; \r\n  minutes = (minutes < 10) ? \"0\" + minutes : minutes;\r\n\r\n  // format time with <span> for colons\r\n  let time = `${daysOfWeek[day]} ${date} <span> | </span> ${hours} <span class=\"colon\">:</span> ${minutes}`;\r\n  \r\n  localTime.html(time); // render time to page\r\n\r\n\r\n // apply blink effect to colons every second\r\n const currentSeconds = new Date().getSeconds();  // get seconds\r\n  if (currentSeconds % 1 === 0) {  // blink every second\r\n    $('.colon').addClass('blink');\r\n  } else {\r\n    $('.colon').removeClass('blink');\r\n  }\r\n\r\n  setTimeout(showTime, 1000); // delay 1s\r\n}\r\n\r\nshowTime(); // display local time\r\n\r\n// API URLs\r\nconst apiGeocoding = \"https://api.opencagedata.com/geocode/v1/json\";\r\nconst keyGeocoding = \"250178f6b314472c95280f5f73d608e1\";\r\n\r\n\r\nconst apiWeather = \"https://api.openweathermap.org/data/2.5\";\r\nconst keyWeather = \"d12f1c70ff84d00a509bf50060d7af7c\";\r\nconst apiHourlyWeather = \"https://pro.openweathermap.org/data/2.5/forecast/hourly\";\r\n\r\n// Get coordinates\r\nconst getCoordinates = (success, error) => {\r\n  if (navigator.geolocation) {\r\n    navigator.geolocation.getCurrentPosition(\r\n      (position) => {\r\n        const lat = position.coords.latitude;\r\n        const lon = position.coords.longitude;\r\n        success(lat, lon);\r\n      },\r\n      (err) => {\r\n        console.error(\"Error:\", err.message);\r\n        if (error) {\r\n          error(err.message);\r\n        }\r\n      },\r\n    );\r\n  } else {\r\n    const errorMessage = \"Geolocation is not supported by this browser.\";\r\n    console.error(\"Error:\", errorMessage);\r\n    if (error) {\r\n      error(errorMessage);\r\n    }\r\n  }\r\n};\r\n\r\n// Forecast days\r\nconst forecastDays = () => {\r\n  let today = new Date().getDay();\r\n  for (let i = 1; i <= 7; i++) {\r\n    let dayIndex = (today + i) % 7;\r\n    $(`#d${i}`).text(daysOfWeek[dayIndex]);\r\n  }\r\n}\r\n\r\n// Render geocoding\r\nconst renderGeocoding = (data) => {\r\n  cityName.text(data.results[0].components.city || data.results[0].components.county);\r\n  countryCode.text(data.results[0].components.country_code.toUpperCase());\r\n\r\n  forecastDays(); // Call function to display days\r\n};\r\n\r\n// Render current weather\r\nconst renderCurrentWeather = (data) => {\r\n  currentWeather.text(data.weather[0].main);  \r\n  currentTemp.text(Math.round(data.main.temp) + \"\\u00B0\");\r\n  currentHumi.text(data.main.humidity + \"%\")\r\n  currentWindSpeed.text(data.wind.speed + \" m/s\")\r\n  \r\n  // load img by current weather\r\n  if (currentWeather.text() == \"Thunderstorm\") {\r\n    iconCurrentWeather.attr('src', 'assets/images/weather/thunderstorm/night-storm.webp');\r\n  } else if(currentWeather.text() == \"Clouds\"){\r\n    iconCurrentWeather.attr('src', '/assets/images/weather/cloudly/night-cloudly.webp');\r\n  } else if(currentWeather.text() == \"Drizzle\"){\r\n iconCurrentWeather.attr('src', '/dist/assets/images/weather/drizzle/night-drizzle.webp');\r\n  } else if(currentWeather.text() == \"Rain\"){\r\n iconCurrentWeather.attr('src', '/dist/assets/images/weather/rain/night-rain.webp');\r\n  } else if(currentWeather.text() == \"Snow\"){\r\n iconCurrentWeather.attr('src', '/dist/assets/images/weather/snow/night-snow.webp');\r\n  } else if(currentWeather.text() == \"Clear\"){\r\n    iconCurrentWeather.attr('src', '/dist/assets/images/weather/snow/night-clear.webp');\r\n  }\r\n}\r\n\r\n\r\n\r\n\r\n// Get minimum temperature from hourly data\r\n// const getMinTempFromHourlyData = (hourlyData) => {\r\n//   return Math.min(...hourlyData.map(data => data.main.temp));\r\n// };\r\n\r\n// Render hourly forecast\r\nconst renderHourlyForecast = (data) => {\r\n  const weatherData = data;\r\n  const currentTime = new Date();\r\n  const currentHour = currentTime.getHours();\r\n  const currentDateString = currentTime.toISOString().slice(0, 10);\r\n\r\n  \r\n  \r\n  const forecastContainer = document.querySelector('#hourly-forecast');\r\n  // Bersihkan konten lama\r\n  forecastContainer.innerHTML = '';\r\n  \r\n  const next12HoursDataToday = filterNext12HoursToday(weatherData, currentDateString, currentHour);\r\n\r\n  next12HoursDataToday.forEach((data) => {\r\n    const time = data.dt_txt.split(' ')[1].split(':')[0];\r\n    const temp = data.main.temp;\r\n   \r\n    \r\n    // Membuat elemen cuaca baru secara dinamis\r\n    const forecastElement = `\r\n       <div class=\"bg-[#48319D]/80 w-12 h-24 rounded-full shadow-2xl mx-auto text-center\">\r\n               <div class=\"flex justify-center items-center relative -top-5 \">\r\n                  <div class=\"mx-auto text-center\">\r\n                     <img src=\"assets/images/weather/thunderstorm/night-storm.webp\" alt=\"icon_weather\"\r\n                        class=\"w-12 h-auto\">\r\n                  </div>\r\n               </div>\r\n               <!--  -->\r\n               <div class=\"relative -top-3 text-xs text-white\">\r\n                  <p class=\"\">12 AM</p>\r\n                  <p class=\"\">30&deg;</p>\r\n               </div>\r\n            </div>\r\n\r\n    `;\r\n\r\n     // Menyisipkan elemen baru ke dalam container\r\n     forecastContainer.innerHTML += forecastElement;\r\n    })\r\n  };\r\n  // next12HoursDataToday.forEach((data, index) => {\r\n  //   if (selectorHours[index]) {\r\n  //     const time = data.dt_txt.split(' ')[1].split(':')[0];\r\n  //     selectorHours[index].text(`Jam: ${time}, Suhu: ${data.main.temp}°C`);\r\n  //     selectorHours[index].show();\r\n  //   }\r\n  // });\r\n\r\n  // for (let i = next12HoursDataToday.length; i < selectorHours.length; i++) {\r\n  //   selectorHours[i].hide();\r\n  // }\r\n \r\n// Filter next 12 hours today\r\nconst filterNext12HoursToday = (weatherData, currentDateString, currentHour) => {\r\n  const maxHourToday = Math.min(currentHour + 12, 24);\r\n\r\n  return weatherData.list.filter(data => {\r\n    const [date, time] = data.dt_txt.split(' ');\r\n    const [hour] = time.split(':');\r\n    return date === currentDateString && hour >= currentHour && hour < maxHourToday;\r\n  });\r\n};\r\n\r\n// Render daily forecast\r\nconst renderDailyForecast = (data) => {\r\n\r\n  maxTemp.text(Math.round(data.list[0].temp.max) + \"\\u00B0C\");\r\n  day1.text(Math.round(data.list[1].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[0].temp.min) + \"\\u00B0C\" + \", \" + data.list[1].weather[0].main);\r\n   day2.text(Math.round(data.list[1].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[1].temp.min) + \"\\u00B0C\" + \", \" + data.list[1].weather[0].main);\r\n  day3.text(Math.round(data.list[2].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[2].temp.min) + \"\\u00B0C\" + \", \" + data.list[2].weather[0].main);\r\n  day4.text(Math.round(data.list[3].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[3].temp.min) + \"\\u00B0C\" + \", \" + data.list[3].weather[0].main);\r\n  day5.text(Math.round(data.list[4].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[4].temp.min) + \"\\u00B0C\" + \", \" + data.list[4].weather[0].main);\r\n  day6.text(Math.round(data.list[5].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[5].temp.min) + \"\\u00B0C\" + \", \" + data.list[5].weather[0].main);\r\n  day7.text(Math.round(data.list[6].temp.max) + \"\\u00B0C\" + \"/\" + Math.round(data.list[6].temp.min) + \"\\u00B0C\" + \", \" + data.list[6].weather[0].main);\r\n}\r\n\r\n\r\n$(window).on(\"load\", () => {\r\n  getCoordinates(\r\n    (lat, lon) => {\r\n      fetch(`${apiGeocoding}?q=${lat}%2C${lon}&key=${keyGeocoding}`)\r\n        .then((response) => response.json())\r\n        .then((responseJson) => renderGeocoding(responseJson))\r\n        .catch((error) => console.error(\"Error:\", error));\r\n\r\n      fetch(`${apiWeather}/weather?lat=${lat}&lon=${lon}&appid=${keyWeather}&units=metric`)\r\n        .then((response) => response.json())\r\n        .then((responseJson) => renderCurrentWeather(responseJson))\r\n        .catch((error) => console.error(\"Error:\", error));\r\n \r\n      fetch(`${apiWeather}/forecast/daily?lat=${lat}&lon=${lon}&cnt=7&appid=${keyWeather}&units=metric`)\r\n        .then((response) => response.json())\r\n        .then((responseJson) => renderDailyForecast(responseJson))\r\n        .catch((error) => console.error(\"Error:\", error));\r\n \r\n      fetch(`${apiHourlyWeather}?lat=${lat}&lon=${lon}&appid=${keyWeather}&units=metric`)\r\n        .then((response) => response.json())\r\n        .then((responseJson) => renderHourlyForecast(responseJson))\r\n        .catch((error) => console.error(\"Error:\", error));\r\n\r\n\r\n    },\r\n    (err) => {\r\n      alert(\"Unable to retrieve your location. Please ensure location services are enabled.\");\r\n      console.error(\"Geolocation error:\", err);\r\n    }\r\n  );\r\n});\r\n\r\n\r\n"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","__webpack_module_cache__","moduleId","cachedModule","undefined","__webpack_modules__","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","tagName","toUpperCase","src","scripts","getElementsByTagName","length","i","test","replace","p","images","key","$","on","drawer","expandedContent","hasClass","removeClass","addClass","daysOfWeek","cityName","countryCode","currentTemp","currentHumi","currentWeather","currentWindSpeed","iconCurrentWeather","localTime","showTime","d","Date","date","getDate","day","getDay","hours","getHours","minutes","getMinutes","time","html","getSeconds","setTimeout","apiWeather","keyWeather","success","error","navigator","geolocation","getCurrentPosition","position","lat","lon","fetch","then","response","json","responseJson","renderGeocoding","data","text","results","components","city","county","country_code","today","dayIndex","forecastDays","catch","console","renderCurrentWeather","weather","main","Math","round","temp","humidity","wind","speed","attr","renderDailyForecast","maxTemp","list","max","day1","min","day2","day3","day4","day5","day6","day7","weatherData","currentTime","currentHour","currentDateString","toISOString","slice","forecastContainer","querySelector","innerHTML","maxHourToday","filter","dt_txt","split","hour","filterNext12HoursToday","forEach","renderHourlyForecast","coords","latitude","longitude","err","message","errorMessage","getCoordinates","alert"],"sourceRoot":""}